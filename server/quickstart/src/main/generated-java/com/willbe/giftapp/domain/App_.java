/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.willbe.giftapp.domain;

import com.google.common.base.MoreObjects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import static javax.persistence.GenerationType.IDENTITY;

@Entity
@Table(name = "app_")
public class App_ implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(App_.class.getName());

    // Raw attributes
    private Integer id;
    private String category_;
    private String templatePath;

    // One to many
    private List<AppWidget> appWidgets = new ArrayList<AppWidget>();

    @Override
    public String entityClassName() {
        return App_.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public App_ id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [category_] ------------------------

    @Size(max = 50)
    @Column(name = "category_", length = 50)
    public String getCategory_() {
        return category_;
    }

    public void setCategory_(String category_) {
        this.category_ = category_;
    }

    public App_ category_(String category_) {
        setCategory_(category_);
        return this;
    }
    // -- [templatePath] ------------------------

    @Size(max = 500)
    @Column(name = "template_path", length = 500)
    public String getTemplatePath() {
        return templatePath;
    }

    public void setTemplatePath(String templatePath) {
        this.templatePath = templatePath;
    }

    public App_ templatePath(String templatePath) {
        setTemplatePath(templatePath);
        return this;
    }

    // -----------------------------------------------------------------
    // One to Many support
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: app_ ==> appWidgets
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "app")
    public List<AppWidget> getAppWidgets() {
        return appWidgets;
    }

    /**
     * Set the {@link AppWidget} list.
     * It is recommended to use the helper method {@link #addAppWidget(AppWidget)} / {@link #removeAppWidget(AppWidget)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param appWidgets the list to set
     */
    public void setAppWidgets(List<AppWidget> appWidgets) {
        this.appWidgets = appWidgets;
    }

    /**
     * Helper method to add the passed {@link AppWidget} to the {@link #appWidgets} list
     * and set this app on the passed appWidget to preserve referential
     * integrity at the object level.
     *
     * @param appWidget the to add
     * @return true if the appWidget could be added to the appWidgets list, false otherwise
     */
    public boolean addAppWidget(AppWidget appWidget) {
        if (getAppWidgets().add(appWidget)) {
            appWidget.setApp(this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link AppWidget} from the {@link #appWidgets} list and unset
     * this app from the passed appWidget to preserve referential integrity at the object level.
     *
     * @param appWidget the instance to remove
     * @return true if the appWidget could be removed from the appWidgets list, false otherwise
     */
    public boolean removeAppWidget(AppWidget appWidget) {
        if (getAppWidgets().remove(appWidget)) {
            appWidget.setApp(null);
            return true;
        }
        return false;
    }

    /**
     * Apply the default values.
     */
    public App_ withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof App_ && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this App_ instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("category_", getCategory_()) //
                .add("templatePath", getTemplatePath()) //
                .toString();
    }
}