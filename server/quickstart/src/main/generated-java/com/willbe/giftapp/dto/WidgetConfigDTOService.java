/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.willbe.giftapp.dto;

import com.willbe.giftapp.domain.Config_;
import com.willbe.giftapp.domain.WidgetConfig;
import com.willbe.giftapp.domain.WidgetConfig_;
import com.willbe.giftapp.dto.support.PageRequestByExample;
import com.willbe.giftapp.dto.support.PageResponse;
import com.willbe.giftapp.repository.Config_Repository;
import com.willbe.giftapp.repository.WidgetConfigRepository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Inject;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for WidgetConfig.
 */
@Service
public class WidgetConfigDTOService {

    @Inject
    private WidgetConfigRepository widgetConfigRepository;
    @Inject
    private Config_DTOService config_DTOService;
    @Inject
    private Config_Repository config_Repository;

    @Transactional(readOnly = true)
    public WidgetConfigDTO findOne(Integer id) {
        return toDTO(widgetConfigRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<WidgetConfigDTO> complete(String query, int maxResults) {
        List<WidgetConfig> results = widgetConfigRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<WidgetConfigDTO> findAll(PageRequestByExample<WidgetConfigDTO> req) {
        Example<WidgetConfig> example = null;
        WidgetConfig widgetConfig = toEntity(req.example);

        if (widgetConfig != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(WidgetConfig_.inputvalue.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(widgetConfig, matcher);
        }

        Page<WidgetConfig> page;
        if (example != null) {
            page = widgetConfigRepository.findAll(example, req.toPageable());
        } else {
            page = widgetConfigRepository.findAll(req.toPageable());
        }

        List<WidgetConfigDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public WidgetConfigDTO save(WidgetConfigDTO dto) {
        if (dto == null) {
            return null;
        }

        final WidgetConfig widgetConfig;

        if (dto.isIdSet()) {
            WidgetConfig widgetConfigTmp = widgetConfigRepository.findOne(dto.id);
            if (widgetConfigTmp != null) {
                widgetConfig = widgetConfigTmp;
            } else {
                widgetConfig = new WidgetConfig();
                widgetConfig.setId(dto.id);
            }
        } else {
            widgetConfig = new WidgetConfig();
        }

        widgetConfig.setInputvalue(dto.inputvalue);

        if (dto.config == null) {
            widgetConfig.setConfig(null);
        } else {
            Config_ config = widgetConfig.getConfig();
            if (config == null || (config.getId().compareTo(dto.config.id) != 0)) {
                widgetConfig.setConfig(config_Repository.findOne(dto.config.id));
            }
        }

        return toDTO(widgetConfigRepository.save(widgetConfig));
    }

    /**
     * Converts the passed widgetConfig to a DTO.
     */
    public WidgetConfigDTO toDTO(WidgetConfig widgetConfig) {
        return toDTO(widgetConfig, 1);
    }

    /**
     * Converts the passed widgetConfig to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param widgetConfig
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public WidgetConfigDTO toDTO(WidgetConfig widgetConfig, int depth) {
        if (widgetConfig == null) {
            return null;
        }

        WidgetConfigDTO dto = new WidgetConfigDTO();

        dto.id = widgetConfig.getId();
        dto.inputvalue = widgetConfig.getInputvalue();
        if (depth-- > 0) {
            dto.config = config_DTOService.toDTO(widgetConfig.getConfig(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a WidgetConfig.
     * Convenient for query by example.
     */
    public WidgetConfig toEntity(WidgetConfigDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a WidgetConfig.
     * Convenient for query by example.
     */
    public WidgetConfig toEntity(WidgetConfigDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        WidgetConfig widgetConfig = new WidgetConfig();

        widgetConfig.setId(dto.id);
        widgetConfig.setInputvalue(dto.inputvalue);
        if (depth-- > 0) {
            widgetConfig.setConfig(config_DTOService.toEntity(dto.config, depth));
        }

        return widgetConfig;
    }
}