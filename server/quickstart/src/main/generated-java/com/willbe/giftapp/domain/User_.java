/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.willbe.giftapp.domain;

import com.google.common.base.MoreObjects;
import com.willbe.giftapp.audit.AuditContextHolder;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;

import static javax.persistence.EnumType.STRING;
import static javax.persistence.GenerationType.IDENTITY;

@Entity
@Table(name = "user_")
public class User_ implements Identifiable<Integer>, Serializable, UserDetails {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(User_.class.getName());

    // Raw attributes
    private Integer id;
    private String login;
    private String password;
    private String email;
    private Boolean isEnabled;
    private Civility civility;
    private CountryCode countryCode;
    private String firstName;
    private String lastName;
    private Instant creationDate;
    private String creationAuthor;
    private Instant lastModificationDate;
    private String lastModificationAuthor;
    private Integer version;

    // One to one
    private Passport passport;

    // Many to many
    private List<Role> roles = new ArrayList<Role>();
    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    // -- [id] ------------------------

    @Override
    public String entityClassName() {
        return User_.class.getSimpleName();
    }

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [login] ------------------------

    public User_ id(Integer id) {
        setId(id);
        return this;
    }

    public User_ login(String login) {
        setLogin(login);
        return this;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public User_ password(String password) {
        setPassword(password);
        return this;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public User_ email(String email) {
        setEmail(email);
        return this;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public User_ isEnabled(Boolean isEnabled) {
        setIsEnabled(isEnabled);
        return this;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    public User_ civility(Civility civility) {
        setCivility(civility);
        return this;
    }

    public void setCivility(Civility civility) {
        this.civility = civility;
    }

    public User_ countryCode(CountryCode countryCode) {
        setCountryCode(countryCode);
        return this;
    }

    public void setCountryCode(CountryCode countryCode) {
        this.countryCode = countryCode;
    }    @NotEmpty
    @Size(max = 100)
    @Column(name = "login", nullable = false, length = 100)
    public String getLogin() {
        return login;
    }

    public User_ firstName(String firstName) {
        setFirstName(firstName);
        return this;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    // -- [password] ------------------------

    public User_ lastName(String lastName) {
        setLastName(lastName);
        return this;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public User_ creationDate(Instant creationDate) {
        setCreationDate(creationDate);
        return this;
    }
    // -- [email] ------------------------

    public void setCreationDate(Instant creationDate) {
        this.creationDate = creationDate;
    }

    public User_ creationAuthor(String creationAuthor) {
        setCreationAuthor(creationAuthor);
        return this;
    }

    public void setCreationAuthor(String creationAuthor) {
        this.creationAuthor = creationAuthor;
    }

    public User_ lastModificationDate(Instant lastModificationDate) {
        setLastModificationDate(lastModificationDate);
        return this;
    }

    public void setLastModificationDate(Instant lastModificationDate) {
        this.lastModificationDate = lastModificationDate;
    }

    public User_ lastModificationAuthor(String lastModificationAuthor) {
        setLastModificationAuthor(lastModificationAuthor);
        return this;
    }

    public void setLastModificationAuthor(String lastModificationAuthor) {
        this.lastModificationAuthor = lastModificationAuthor;
    }

    public User_ version(Integer version) {
        setVersion(version);
        return this;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public User_ passport(Passport passport) {
        setPassport(passport);
        return this;
    }

    public void setPassport(Passport passport) {
        this.passport = passport;

        if (this.passport != null) {
            this.passport.setHolder(this);
        }
    }

    /**
     * Helper method to add the passed {@link Role} to the {@link #roles} list.
     */
    public boolean addRole(Role role) {
        return getRoles().add(role);
    }

    /**
     * Returns the {@link #roles} list.
     */
    @JoinTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    @ManyToMany
    public List<Role> getRoles() {
        return roles;
    }    @Email
    @Size(max = 100)
    @Column(name = "email", length = 100)
    public String getEmail() {
        return email;
    }

    /**
     * Helper method to remove the passed {@link Role} from the {@link #roles} list.
     */
    public boolean removeRole(Role role) {
        return getRoles().remove(role);
    }

    /**
     * Helper method to determine if the passed {@link Role} is present in the {@link #roles} list.
     */
    public boolean containsRole(Role role) {
        return getRoles() != null && getRoles().contains(role);
    }
    // -- [isEnabled] ------------------------

    /**
     * Apply the default values.
     */
    public User_ withDefaults() {
        setIsEnabled(true);
        setCivility(Civility.MR);
        setCountryCode(CountryCode.FRANCE);
        return this;
    }

    @PrePersist
    protected void prePersist() {
        if (AuditContextHolder.audit()) {
            setCreationAuthor(AuditContextHolder.username());
            setCreationDate(Instant.now());

        }
    }

    @PreUpdate
    protected void preUpdate() {
        if (AuditContextHolder.audit()) {
            setLastModificationAuthor(AuditContextHolder.username());
            setLastModificationDate(Instant.now());
        }
    }

    @Override
    @Transient
    public Collection<? extends GrantedAuthority> getAuthorities() {
//        org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.willbe.giftapp.domain.User_.roles, could not initialize proxy - no Session
//        ArrayList<GrantedAuthority> authorities = new ArrayList<>();
//        if (roles == null) {
//            return authorities;
//        }
//        for (Role role : roles) {
//            authorities.add(new SimpleGrantedAuthority(role.getRoleName()));
//        }
        ArrayList<GrantedAuthority> grantedAuthorities = new ArrayList<>();
        grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
        return grantedAuthorities;
    }

    @NotEmpty
    @Size(max = 100)
    @Column(name = "\"password\"", nullable = false, length = 100)
    public String getPassword() {
        return password;
    }

    @Override
    @Transient
    public String getUsername() {
        return login;
    }

    @Override
    @Transient
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    @Transient
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    @Transient
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    @Transient
    public boolean isEnabled() {
        return isEnabled;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Inverse side of one-to-one relation: User_.id ==> Passport.holderId
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @OneToOne(mappedBy = "holder")
    public Passport getPassport() {
        return passport;
    }

    /**
     * Set the {@link #roles} list.
     *
     * @param roles the list of Role
     */
    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }


    @NotNull
    @Column(name = "is_enabled", nullable = false, length = 1)
    public Boolean getIsEnabled() {
        return isEnabled;
    }




    // -- [civility] ------------------------


    @Column(name = "civility", length = 2)
    @Enumerated(STRING)
    public Civility getCivility() {
        return civility;
    }


    // -- [countryCode] ------------------------


    @Column(name = "country_code", length = 6)
    @Convert(converter = CountryCodeConverter.class)
    public CountryCode getCountryCode() {
        return countryCode;
    }


    // -- [firstName] ------------------------


    @Size(max = 100)
    @Column(name = "first_name", length = 100)
    public String getFirstName() {
        return firstName;
    }


    // -- [lastName] ------------------------


    @Size(max = 100)
    @Column(name = "last_name", length = 100)
    public String getLastName() {
        return lastName;
    }


    // -- [creationDate] ------------------------


    @Column(name = "creation_date", length = 29)
    public Instant getCreationDate() {
        return creationDate;
    }


    // -- [creationAuthor] ------------------------


    @Column(name = "creation_author", length = 200)
    public String getCreationAuthor() {
        return creationAuthor;
    }


    // -- [lastModificationDate] ------------------------


    @Column(name = "last_modification_date", length = 29)
    public Instant getLastModificationDate() {
        return lastModificationDate;
    }


    // -- [lastModificationAuthor] ------------------------


    @Column(name = "last_modification_author", length = 200)
    public String getLastModificationAuthor() {
        return lastModificationAuthor;
    }


    // -- [version] ------------------------


    @Column(name = "version", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }


    // -----------------------------------------------------------------
    // One to one
    // -----------------------------------------------------------------


    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: user_ ==> roles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof User_ && hashCode() == other.hashCode());
    }


    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this User_ instance.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("login", getLogin()) //
                .add("password", "XXXX") //
                .add("email", getEmail()) //
                .add("isEnabled", getIsEnabled()) //
                .add("civility", getCivility()) //
                .add("countryCode", getCountryCode()) //
                .add("firstName", getFirstName()) //
                .add("lastName", getLastName()) //
                .add("creationDate", getCreationDate()) //
                .add("creationAuthor", getCreationAuthor()) //
                .add("lastModificationDate", getLastModificationDate()) //
                .add("lastModificationAuthor", getLastModificationAuthor()) //
                .add("version", getVersion()) //
                .toString();
    }


}