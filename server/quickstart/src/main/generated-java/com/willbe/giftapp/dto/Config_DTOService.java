/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 *
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.willbe.giftapp.dto;

import com.willbe.giftapp.domain.App_;
import com.willbe.giftapp.domain.Config_;
import com.willbe.giftapp.domain.User_;
import com.willbe.giftapp.dto.support.PageRequestByExample;
import com.willbe.giftapp.dto.support.PageResponse;
import com.willbe.giftapp.repository.App_Repository;
import com.willbe.giftapp.repository.Config_Repository;
import com.willbe.giftapp.repository.User_Repository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Inject;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for Config_.
 */
@Service
public class Config_DTOService {

    @Inject
    private Config_Repository config_Repository;
    @Inject
    private User_DTOService user_DTOService;
    @Inject
    private User_Repository user_Repository;
    @Inject
    private App_DTOService app_DTOService;
    @Inject
    private App_Repository app_Repository;

    @Transactional(readOnly = true)
    public Config_DTO findOne(Integer id) {
        return toDTO(config_Repository.findOne(id));
    }

    /**
     * Converts the passed config_ to a DTO.
     */
    public Config_DTO toDTO(Config_ config_) {
        return toDTO(config_, 1);
    }

    /**
     * Converts the passed config_ to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param config_
     * @param depth   the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *                A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *                xToOne associations will be serialized, etc.
     */
    public Config_DTO toDTO(Config_ config_, int depth) {
        if (config_ == null) {
            return null;
        }

        Config_DTO dto = new Config_DTO();

        dto.id = config_.getId();
        if (depth-- > 0) {
            dto.user = user_DTOService.toDTO(config_.getUser(), depth);
            dto.app = app_DTOService.toDTO(config_.getApp(), depth);
        }

        return dto;
    }

    @Transactional(readOnly = true)
    public List<Config_DTO> complete(String query, int maxResults) {
        List<Config_> results = config_Repository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<Config_DTO> findAll(PageRequestByExample<Config_DTO> req) {
        Example<Config_> example = null;
        Config_ config_ = toEntity(req.example);

        if (config_ != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() /**/;

            example = Example.of(config_, matcher);
        }

        Page<Config_> page;
        if (example != null) {
            page = config_Repository.findAll(example, req.toPageable());
        }
        else {
            page = config_Repository.findAll(req.toPageable());
        }

        List<Config_DTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Converts the passed dto to a Config_.
     * Convenient for query by example.
     */
    public Config_ toEntity(Config_DTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Config_.
     * Convenient for query by example.
     */
    public Config_ toEntity(Config_DTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Config_ config_ = new Config_();

        config_.setId(dto.id);
        if (depth-- > 0) {
            config_.setUser(user_DTOService.toEntity(dto.user, depth));
            config_.setApp(app_DTOService.toEntity(dto.app, depth));
        }

        return config_;
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public Config_DTO save(Config_DTO dto) {
        if (dto == null) {
            return null;
        }

        final Config_ config_;

        if (dto.isIdSet()) {
            Config_ config_Tmp = config_Repository.findOne(dto.id);
            if (config_Tmp != null) {
                config_ = config_Tmp;
            }
            else {
                config_ = new Config_();
                config_.setId(dto.id);
            }
        }
        else {
            config_ = new Config_();
        }


        if (dto.user == null) {
            config_.setUser(null);
        }
        else {
            User_ user = config_.getUser();
            if (user == null || (user.getId().compareTo(dto.user.id) != 0)) {
                config_.setUser(user_Repository.findOne(dto.user.id));
            }
        }

        if (dto.app == null) {
            config_.setApp(null);
        }
        else {
            App_ app = config_.getApp();
            if (app == null || (app.getId().compareTo(dto.app.id) != 0)) {
                config_.setApp(app_Repository.findOne(dto.app.id));
            }
        }

        return toDTO(config_Repository.save(config_));
    }
}