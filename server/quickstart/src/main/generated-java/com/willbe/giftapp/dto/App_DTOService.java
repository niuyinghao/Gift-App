/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.willbe.giftapp.dto;

import com.willbe.giftapp.domain.App_;
import com.willbe.giftapp.domain.App__;
import com.willbe.giftapp.dto.support.PageRequestByExample;
import com.willbe.giftapp.dto.support.PageResponse;
import com.willbe.giftapp.repository.App_Repository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Inject;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for App_.
 */
@Service
public class App_DTOService {

    @Inject
    private App_Repository app_Repository;

    @Transactional(readOnly = true)
    public App_DTO findOne(Integer id) {
        return toDTO(app_Repository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<App_DTO> complete(String query, int maxResults) {
        List<App_> results = app_Repository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<App_DTO> findAll(PageRequestByExample<App_DTO> req) {
        Example<App_> example = null;
        App_ app_ = toEntity(req.example);

        if (app_ != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(App__.category_.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(App__.templatePath.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(app_, matcher);
        }

        Page<App_> page;
        if (example != null) {
            page = app_Repository.findAll(example, req.toPageable());
        } else {
            page = app_Repository.findAll(req.toPageable());
        }

        List<App_DTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public App_DTO save(App_DTO dto) {
        if (dto == null) {
            return null;
        }

        final App_ app_;

        if (dto.isIdSet()) {
            App_ app_Tmp = app_Repository.findOne(dto.id);
            if (app_Tmp != null) {
                app_ = app_Tmp;
            } else {
                app_ = new App_();
                app_.setId(dto.id);
            }
        } else {
            app_ = new App_();
        }

        app_.setCategory_(dto.category_);

        app_.setTemplatePath(dto.templatePath);

        return toDTO(app_Repository.save(app_));
    }

    /**
     * Converts the passed app_ to a DTO.
     */
    public App_DTO toDTO(App_ app_) {
        return toDTO(app_, 1);
    }

    /**
     * Converts the passed app_ to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param app_
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public App_DTO toDTO(App_ app_, int depth) {
        if (app_ == null) {
            return null;
        }

        App_DTO dto = new App_DTO();

        dto.id = app_.getId();
        dto.category_ = app_.getCategory_();
        dto.templatePath = app_.getTemplatePath();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a App_.
     * Convenient for query by example.
     */
    public App_ toEntity(App_DTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a App_.
     * Convenient for query by example.
     */
    public App_ toEntity(App_DTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        App_ app_ = new App_();

        app_.setId(dto.id);
        app_.setCategory_(dto.category_);
        app_.setTemplatePath(dto.templatePath);
        if (depth-- > 0) {
        }

        return app_;
    }
}