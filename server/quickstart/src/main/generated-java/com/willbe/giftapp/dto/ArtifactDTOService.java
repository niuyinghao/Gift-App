/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.willbe.giftapp.dto;

import com.willbe.giftapp.domain.App_;
import com.willbe.giftapp.domain.Artifact;
import com.willbe.giftapp.domain.Artifact_;
import com.willbe.giftapp.domain.Config_;
import com.willbe.giftapp.domain.User_;
import com.willbe.giftapp.dto.support.PageRequestByExample;
import com.willbe.giftapp.dto.support.PageResponse;
import com.willbe.giftapp.repository.App_Repository;
import com.willbe.giftapp.repository.ArtifactRepository;
import com.willbe.giftapp.repository.Config_Repository;
import com.willbe.giftapp.repository.User_Repository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.inject.Inject;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for Artifact.
 */
@Service
public class ArtifactDTOService {

    @Inject
    private ArtifactRepository artifactRepository;
    @Inject
    private Config_DTOService config_DTOService;
    @Inject
    private Config_Repository config_Repository;
    @Inject
    private User_DTOService user_DTOService;
    @Inject
    private User_Repository user_Repository;
    @Inject
    private App_DTOService app_DTOService;
    @Inject
    private App_Repository app_Repository;

    @Transactional(readOnly = true)
    public ArtifactDTO findOne(Integer id) {
        return toDTO(artifactRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ArtifactDTO> complete(String query, int maxResults) {
        List<Artifact> results = artifactRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ArtifactDTO> findAll(PageRequestByExample<ArtifactDTO> req) {
        Example<Artifact> example = null;
        Artifact artifact = toEntity(req.example);

        if (artifact != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Artifact_.outputPath.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(artifact, matcher);
        }

        Page<Artifact> page;
        if (example != null) {
            page = artifactRepository.findAll(example, req.toPageable());
        } else {
            page = artifactRepository.findAll(req.toPageable());
        }

        List<ArtifactDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ArtifactDTO save(ArtifactDTO dto) {
        if (dto == null) {
            return null;
        }

        final Artifact artifact;

        if (dto.isIdSet()) {
            Artifact artifactTmp = artifactRepository.findOne(dto.id);
            if (artifactTmp != null) {
                artifact = artifactTmp;
            } else {
                artifact = new Artifact();
                artifact.setId(dto.id);
            }
        } else {
            artifact = new Artifact();
        }

        artifact.setOutputPath(dto.outputPath);

        if (dto.config == null) {
            artifact.setConfig(null);
        } else {
            Config_ config = artifact.getConfig();
            if (config == null || (config.getId().compareTo(dto.config.id) != 0)) {
                artifact.setConfig(config_Repository.findOne(dto.config.id));
            }
        }

        if (dto.user == null) {
            artifact.setUser(null);
        } else {
            User_ user = artifact.getUser();
            if (user == null || (user.getId().compareTo(dto.user.id) != 0)) {
                artifact.setUser(user_Repository.findOne(dto.user.id));
            }
        }

        if (dto.app == null) {
            artifact.setApp(null);
        } else {
            App_ app = artifact.getApp();
            if (app == null || (app.getId().compareTo(dto.app.id) != 0)) {
                artifact.setApp(app_Repository.findOne(dto.app.id));
            }
        }

        return toDTO(artifactRepository.save(artifact));
    }

    /**
     * Converts the passed artifact to a DTO.
     */
    public ArtifactDTO toDTO(Artifact artifact) {
        return toDTO(artifact, 1);
    }

    /**
     * Converts the passed artifact to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param artifact
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ArtifactDTO toDTO(Artifact artifact, int depth) {
        if (artifact == null) {
            return null;
        }

        ArtifactDTO dto = new ArtifactDTO();

        dto.id = artifact.getId();
        dto.outputPath = artifact.getOutputPath();
        if (depth-- > 0) {
            dto.config = config_DTOService.toDTO(artifact.getConfig(), depth);
            dto.user = user_DTOService.toDTO(artifact.getUser(), depth);
            dto.app = app_DTOService.toDTO(artifact.getApp(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Artifact.
     * Convenient for query by example.
     */
    public Artifact toEntity(ArtifactDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Artifact.
     * Convenient for query by example.
     */
    public Artifact toEntity(ArtifactDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Artifact artifact = new Artifact();

        artifact.setId(dto.id);
        artifact.setOutputPath(dto.outputPath);
        if (depth-- > 0) {
            artifact.setConfig(config_DTOService.toEntity(dto.config, depth));
            artifact.setUser(user_DTOService.toEntity(dto.user, depth));
            artifact.setApp(app_DTOService.toEntity(dto.app, depth));
        }

        return artifact;
    }
}