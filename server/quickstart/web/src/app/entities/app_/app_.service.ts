//
// Project home: https://github.com/jaxio/celerio-angular-quickstart
//
// Source code generated by Celerio, an Open Source code generator by Jaxio.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Source code: https://github.com/jaxio/celerio/
// Follow us on twitter: @jaxiosoft
// This header can be customized in Celerio conf...
// Template pack-angular:web/src/app/entities/entity.service.ts.e.vm
//
import {Injectable} from '@angular/core';
import {Headers, Http, RequestOptions} from '@angular/http';
import {LazyLoadEvent} from 'primeng/primeng';
import {Observable} from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import {MessageService} from '../../service/message.service';
import {PageRequestByExample, PageResponse} from '../../support/paging';
import {App_} from './app_';

@Injectable()
export class App_Service {

    private options = new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/json' }) });

    constructor(private http: Http, private messageService : MessageService) {}

    /**
     * Get a App_ by id.
     */
    getApp_(id : any) : Observable<App_> {
        return this.http.get('/api/app_s/' + id)
            .map(response => new App_(response.json()))
            .catch(this.handleError);
    }

    /**
     * Update the passed app_.
     */
    update(app_ : App_) : Observable<App_> {
        let body = JSON.stringify(app_);

        return this.http.put('/api/app_s/', body, this.options)
            .map(response => new App_(response.json()))
            .catch(this.handleError);
    }

    /**
     * Load a page (for paginated datatable) of App_ using the passed
     * app_ as an example for the search by example facility.
     */
    getPage(app_ : App_, event : LazyLoadEvent) : Observable<PageResponse<App_>> {
        let req = new PageRequestByExample(app_, event);
        let body = JSON.stringify(req);

        return this.http.post('/api/app_s/page', body, this.options)
            .map(response => {
                let pr : any = response.json();
                return new PageResponse<App_>(pr.totalPages, pr.totalElements, App_.toArray(pr.content));
            })
            .catch(this.handleError);
    }

    /**
     * Performs a search by example on 1 attribute (defined on server side) and returns at most 10 results.
     * Used by App_CompleteComponent.
     */
    complete(query : string) : Observable<App_[]> {
        let body = JSON.stringify({'query': query, 'maxResults': 10});
        return this.http.post('/api/app_s/complete', body, this.options)
            .map(response => App_.toArray(response.json()))
            .catch(this.handleError);
    }

    /**
     * Delete an App_ by id.
     */
    delete(id : any) {
        return this.http.delete('/api/app_s/' + id).catch(this.handleError);
    }

    // sample method from angular doc
    private handleError (error: any) {
        // TODO: seems we cannot use messageService from here...
        let errMsg = (error.message) ? error.message :
        error.status ? `Status: ${error.status} - Text: ${error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        if (error.status === 401 ) {
            window.location.href = '/';
        }
        return Observable.throw(errMsg);
    }
}
