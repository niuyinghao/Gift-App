//
// Project home: https://github.com/jaxio/celerio-angular-quickstart
//
// Source code generated by Celerio, an Open Source code generator by Jaxio.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Source code: https://github.com/jaxio/celerio/
// Follow us on twitter: @jaxiosoft
// This header can be customized in Celerio conf...
// Template pack-angular:web/src/app/entities/entity-detail.component.ts.e.vm
//
import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';
import {MessageService} from '../../service/message.service';
import {Config_} from './config_';
import {Config_Service} from './config_.service';
import {User_} from '../user_/user_';
import {App_} from '../app_/app_';

@Component({
    moduleId: module.id,
	templateUrl: 'config_-detail.component.html',
	selector: 'config_-detail',
})
export class Config_DetailComponent implements OnInit, OnDestroy {
    config_ : Config_;

    private params_subscription: any;


    @Input() sub : boolean = false;
    @Input() // used to pass the parent when creating a new Config_
    set user(user : User_) {
        this.config_ = new Config_();
        this.config_.user = user;
    }

    @Input() // used to pass the parent when creating a new Config_
    set app(app : App_) {
        this.config_ = new Config_();
        this.config_.app = app;
    }

    @Output() onSaveClicked = new EventEmitter<Config_>();
    @Output() onCancelClicked = new EventEmitter();

    constructor(private route: ActivatedRoute, private router: Router, private messageService: MessageService, private config_Service: Config_Service) {
    }

    ngOnInit() {
        if (this.sub) {
            return;
        }

        this.params_subscription = this.route.params.subscribe(params => {
            let id = params['id'];
            console.log('ngOnInit for config_-detail ' + id);

            if (id === 'new') {
                this.config_ = new Config_();
            } else {
                this.config_Service.getConfig_(id)
                    .subscribe(config_ => {
                            this.config_ = config_;
                        },
                        error =>  this.messageService.error('ngOnInit error', error)
                    );
            }
        });
    }

    ngOnDestroy() {
        if (!this.sub) {
            this.params_subscription.unsubscribe();
        }
    }

    gotoUser() {
        this.router.navigate(['/user_', this.config_.user.id]);
    }

    clearUser() {
        this.config_.user = null;
    }

    gotoApp() {
        this.router.navigate(['/app_', this.config_.app.id]);
    }

    clearApp() {
        this.config_.app = null;
    }

    onSave() {
        this.config_Service.update(this.config_).
            subscribe(
                config_ => {
                    this.config_ = config_;
                    if (this.sub) {
                        this.onSaveClicked.emit(this.config_);
                        this.messageService.info('Saved OK and msg emitted', 'Angular Rocks!')
                    } else {
                        this.messageService.info('Saved OK', 'Angular Rocks!')
                    }
                },
                error =>  this.messageService.error('Could not save', error)
            );
    }

    onCancel() {
        if (this.sub) {
            this.onCancelClicked.emit("cancel");
            this.messageService.info('Cancel clicked and msg emitted', 'Angular Rocks!')
        }
    }

}
